head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2019.10.03.20.56.49;	author luiz.leitao;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2019/2
 * Prof. Marcelo Luiz Drumond Lanza
 *
 * Autor: Luiz Fernando Loureiro Leitao
 * Descricao: implementacao das funcoes MostrarMatriz1, MostrarMatriz2, MultiplicarMatrizes e MostrarMatrizResultado.
 *
 * $Author$
 * $Date$
 * $Log$
 */










/* Inclusao dos arquivos de cabecalho da biblioteca padrao da linguagem. */

#include <stdio.h>
#include <stdlib.h>





/* Inclusao do arquivo de cabecalho personalizado para o trabalho. */

#include "aula0701.h"





/* Implementacao da funcao MultiplicarMatrizes. */

tipoErros
MultiplicarMatrizes(float matriz1[LINHAS_1][COLUNAS_1], 
                    float matriz2[LINHAS_2][COLUNAS_2], 
                    float matrizResultado[LINHAS_1][COLUNAS_2])
{

  /* Utilizacao de variaveis locais dentro da funcao MultiplicarMatrizes. */

  ush contadorLinhas1, contadorColunas2, contadorAuxiliar;  





  /* Verificacao da existencia de argumento nulo. */

  if (matriz1 == NULL)  /* if (!matriz1)*/
    return argumentoNulo;  /* 3 */





  /* Verificacao da existencia de argumento nulo. */

  if (matriz2 == NULL)  /* if (!matriz2)*/
    return argumentoNulo;  /* 3 */





  /* Verificacao da existencia de argumento nulo. */

  if (matrizResultado == NULL)  /* if (!matrizResultado)*/
    return argumentoNulo;  /* 3 */





  /* Loop triplo para a multiplicacao das matrizes. */

  for (contadorLinhas1 = 0; contadorLinhas1 < LINHAS_1; contadorLinhas1++)
    for (contadorColunas2 = 0; contadorColunas2 < COLUNAS_2; contadorColunas2++)
    {
      matrizResultado[contadorLinhas1][contadorColunas2] = 0;

      for (contadorAuxiliar = 0; contadorAuxiliar < COLUNAS_1; contadorAuxiliar++)
        matrizResultado[contadorLinhas1][contadorColunas2] = 
        matrizResultado[contadorLinhas1][contadorColunas2] + 
        matriz1[contadorLinhas1][contadorAuxiliar] *
        matriz2[contadorAuxiliar][contadorColunas2];
    } /* for */





  return ok;  /* 0 */

} /* MultiplicarMatrizes */










/* Implementacao da funcao MostrarMatriz1. */

void
MostrarMatriz1(float matriz1[LINHAS_1][COLUNAS_1])
{

  /* Utilizacao de variaveis locais dentro da funcao MostrarMatriz1. */

  ush linhas, colunas;





  /* Quebra tripla de linha. */

  printf("\n\n\n"); 





  /* Loop duplo para a exibicao da primeira matriz. */

  for (linhas = 0; linhas < LINHAS_1; linhas++)
  {
    for (colunas = 0; colunas < COLUNAS_1; colunas++)
      printf("%0.3f ", matriz1[linhas][colunas]);

    printf("\n");
  } /* for */

} /* MostrarMatriz1 */










/* Implementacao da funcao MostrarMatriz2. */

void
MostrarMatriz2(float matriz2[LINHAS_2][COLUNAS_2])
{

  /* Utilizacao de variaveis locais dentro da funcao MostrarMatriz2. */

  ush linhas, colunas;





  /* Quebra simples de linha. */

  printf("\n");





  /* Loop duplo para a exibicao da segunda matriz. */

  for (linhas = 0; linhas < LINHAS_2; linhas++)
  {
    for (colunas = 0; colunas < COLUNAS_2; colunas++)
      printf("%0.3f ", matriz2[linhas][colunas]);

    printf("\n");
  } /* for */

} /* MostrarMatriz2 */










/* Implementacao da funcao MostrarMatrizResultado. */

void
MostrarMatrizResultado(float matrizResultado[LINHAS_1][COLUNAS_2])
{

  /* Utilizacao de variaveis locais dentro da funcao MostrarMatrizResultado. */

  ush linhas, colunas;





  /* Quebra simples de linha. */

  printf("\n");





  /* Loop duplo para a exibicao da matriz produto. */

  for (linhas = 0; linhas < LINHAS_1; linhas++)
  {
    for (colunas = 0; colunas < COLUNAS_2; colunas++)
      printf("%0.3f ", matrizResultado[linhas][colunas]);

    printf("\n");
  } /* for */





  /* Quebra tripla de linha. */

  printf("\n\n\n");

} /* MostrarMatrizResultado */










/* $RCSfile$ */
@
